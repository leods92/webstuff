<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web Stuff</title>
    <atom:link href="http://webstuff.leods92.com/feed.xml" rel="self" type="application/rss+xml"/>
    <link>http://webstuff.leods92.com/</link>
    <description>Mostly about web technologies.</description>
    <pubDate>Tue, 21 Sep 2021 17:06:48 +0200</pubDate>
    
      <item>
        <title>XHR's responseURL polyfill?</title>
        <link>http://webstuff.leods92.com/2018/07/07/xhr-response-url-polyfill.html</link>
        <guid isPermaLink="true">http://webstuff.leods92.com/2018/07/07/xhr-response-url-polyfill.html</guid>
        <description>&lt;p&gt;It all started at work.&lt;/p&gt;

&lt;p&gt;While developing a new feature, we realized we couldn‚Äôt use &lt;a href=&quot;https://github.com/transloadit/uppy&quot;&gt;Uppy&lt;/a&gt; as an up-loader on Internet Explorer 11.
The problem we had was caused by Uppy‚Äôs &lt;a href=&quot;https://uppy.io/docs/aws-s3/&quot;&gt;S3 plug-in&lt;/a&gt; which relies on &lt;code&gt;XmlHttpResponse&lt;/code&gt;‚Äôs &lt;code&gt;responseURL&lt;/code&gt; which is not available in older browsers.&lt;/p&gt;

&lt;h1 id=&quot;responseurl&quot;&gt;&lt;code&gt;responseURL&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;This &lt;code&gt;XmlHttpResponse&lt;/code&gt; property was introduced in the XHR spec in Feb 2014 by &lt;a href=&quot;https://github.com/whatwg/xhr/commit/0c9670185b79c255211881e086e05e7a99e65f06&quot;&gt;this commit&lt;/a&gt; because of &lt;a href=&quot;https://www.w3.org/Bugs/Public/show_bug.cgi?id=15417&quot;&gt;this bug&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Its value is a string representation of the response URL.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Isn‚Äôt it the same as the request URL?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;No.&lt;/p&gt;

&lt;p&gt;The URLs you request might be redirected to other ones until you finally get a response. The last URL in a redirection-chain is the response URL.&lt;/p&gt;

&lt;p&gt;In case there‚Äôs no redirection, yes, the request URL is the same as the response URL.&lt;/p&gt;

&lt;h1 id=&quot;solving-the-problem&quot;&gt;Solving the problem&lt;/h1&gt;

&lt;h2 id=&quot;reading-the-location-header&quot;&gt;Reading the &lt;code&gt;Location&lt;/code&gt; header&lt;/h2&gt;

&lt;p&gt;I asked myself:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;How about getting the URL from the &lt;code&gt;Location&lt;/code&gt; HTTP header?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The problem is that that header is never visible to &lt;code&gt;XmlHttpRequest&lt;/code&gt; instances.&lt;/p&gt;

&lt;p&gt;From &lt;a href=&quot;https://dvcs.w3.org/hg/xhr/raw-file/tip/Overview.html#infrastructure-for-the-send%28%29-method&quot;&gt;the spec&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If the source origin and the origin of request URL are same origin &lt;strong&gt;transparently follow the redirect&lt;/strong&gt; while observing the same-origin request event rules.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That means that if a redirect happens, only the information from the last URL in the redirection-chain will be available.
If we could prevent the redirections from happening transparently, we could read and store the most recent &lt;code&gt;Location&lt;/code&gt; value and then handle the final redirection ourselves.&lt;/p&gt;

&lt;p&gt;Unfortunately, that is not possible.&lt;/p&gt;

&lt;h2 id=&quot;reading-a-custom-http-header&quot;&gt;Reading a custom HTTP header&lt;/h2&gt;

&lt;p&gt;This is &lt;a href=&quot;https://github.com/github/fetch/blob/da07fa1dde1b6db238ef5567c1096dd9873e3ebf/README.md#obtaining-the-response-url&quot;&gt;the way&lt;/a&gt; GitHub‚Äôs fetch polyfill tackles the problem.&lt;/p&gt;

&lt;p&gt;In order to work, their solution requires control over the HTTP server and the sending of a &lt;code&gt;X-Request-URL&lt;/code&gt; header.&lt;/p&gt;

&lt;p&gt;In our case, we‚Äôre hitting an S3 server we don‚Äôt control; adding custom headers is probably not possible.&lt;/p&gt;

&lt;h2 id=&quot;falling-back-to-the-request-url&quot;&gt;Falling back to the request URL&lt;/h2&gt;

&lt;p&gt;To implement this in a ‚Äúclean‚Äù way, I‚Äôd first detect if there were redirections.&lt;/p&gt;

&lt;p&gt;If there were no redirections, I‚Äôd use the request URL as the response URL.&lt;/p&gt;

&lt;p&gt;Otherwise, I‚Äôd throw an error because in this case it‚Äôd be impossible to know what the response URL is.&lt;/p&gt;

&lt;p&gt;Detecting redirections is not possible with &lt;code&gt;XmlHttpRequest&lt;/code&gt; because there‚Äôs no property, method or (standard) header that determines whether a redirection happened.&lt;/p&gt;

&lt;p&gt;Getting the request URL is also not so simple.
While looking at MDN‚Äôs &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHTTPRequest#Constructor&quot;&gt;XMLHTTPRequest documentation&lt;/a&gt; and &lt;a href=&quot;https://github.com/chromium/chromium/blob/master/third_party/blink/renderer/core/xmlhttprequest/xml_http_request.cc&quot;&gt;Chromium‚Äôs source code&lt;/a&gt;, I noticed that there‚Äôs no public property or method which one can get the request URL from.&lt;/p&gt;

&lt;h2 id=&quot;how-i-moved-forward&quot;&gt;How I moved forward&lt;/h2&gt;

&lt;p&gt;I couldn‚Äôt come up with a clean server-less fix for this issue.&lt;/p&gt;

&lt;p&gt;The way I decided to move forward with was to fall back to the request URL when the &lt;code&gt;responseURL&lt;/code&gt; property is undefined.
And I think that‚Äôs good enough.&lt;/p&gt;

&lt;p&gt;Drawbacks to consider:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If there‚Äôs a redirection and the code relies on the &lt;code&gt;responseURL&lt;/code&gt;, wrong things may happen; in this case, the response URL is not the same as the request URL.&lt;/li&gt;
  &lt;li&gt;In order to retrieve the request URL, the URL must be saved somewhere accessible beforehand.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I still think it‚Äôs an appropriate solution for our case because:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I cannot think of a situation in which S3 would redirect upload requests.&lt;/li&gt;
  &lt;li&gt;IE11 support is currently inexistent so anything is better than nothing.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I‚Äôve opened a PR fixing Uppy‚Äôs S3 plug-in‚Äôs issue.&lt;/p&gt;

&lt;p&gt;Now I‚Äôm hoping that the maintainers accept it :P&lt;/p&gt;

&lt;h1 id=&quot;polyfill&quot;&gt;Polyfill?&lt;/h1&gt;

&lt;p&gt;While researching about this issue, I couldn‚Äôt find any polyfill.
Because of that, I thought of writing one myself but I decided not to.&lt;/p&gt;

&lt;p&gt;In my opinion, the solution I decided to move forward with would not be suitable for a polyfill; simply because it wouldn‚Äôt be 100% compliant with &lt;code&gt;responseURL&lt;/code&gt;‚Äôs spec.&lt;/p&gt;

&lt;p&gt;I even imagined developers wasting their time with ‚Äúweird issues‚Äù because of it.&lt;/p&gt;

&lt;p&gt;So I decided to write this post instead and share as much information as I can with fellow developers. ü§ó&lt;/p&gt;

&lt;h1 id=&quot;additional-links&quot;&gt;Additional links&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/chromium/chromium/blob/master/third_party/WebKit/LayoutTests/http/tests/xmlhttprequest/responseURL.html&quot;&gt;Chromium‚Äôs &lt;code&gt;responseURL&lt;/code&gt; tests&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/8056277/how-to-get-response-url-in-xmlhttprequest&quot;&gt;Stack Overflow discussion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/github/fetch/issues/443&quot;&gt;Fetch polyfill issue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/de/docs/Web/API/XMLHttpRequest/responseURL&quot;&gt;&lt;code&gt;responseURL&lt;/code&gt; compatibility list&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 07 Jul 2018 13:06:00 +0200</pubDate>
      </item>
    
      <item>
        <title>Blogging: another attempt</title>
        <link>http://webstuff.leods92.com/2015/06/01/new-blog.html</link>
        <guid isPermaLink="true">http://webstuff.leods92.com/2015/06/01/new-blog.html</guid>
        <description>&lt;p&gt;The internet is all about sharing, even when &lt;a href=&quot;http://knowyourmeme.com/memes/doge&quot;&gt;it‚Äôs not that important&lt;/a&gt;.
Working as a web professional and being an open source user, I feel like I‚Äôm in huge sharing debt to the world.&lt;/p&gt;

&lt;p&gt;So that I could mitigate that (and give some love back ‚ô•Ô∏è), I‚Äôve tried to write about things that usually made me waste time. However, eventually I would be in a hurry and end up forgetting about the blog.&lt;/p&gt;

&lt;p&gt;You know, it takes some time to open the blog platform (Wordpress, Tumblr, ‚Ä¶), find a nice picture, write the text, elaborate a sample code, review and then publish.&lt;/p&gt;

&lt;p&gt;Post ideas usually come from me starting to use a new tool or doing something in a different way. Then I stumble upon a problem and once that‚Äôs fixed, I write on my week-plan: ‚Äúwrite about XYZ on Sunday‚Äù. Great!
Then Monday comes and that post is still just planned. After rescheduling its writing a few times I lose the thread and give up.&lt;/p&gt;

&lt;p&gt;For this next attempt I wanted:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;posting process to be simple and fast&lt;/li&gt;
  &lt;li&gt;to have content stored in a &lt;a href=&quot;http://en.wikipedia.org/wiki/Revision_control&quot;&gt;VCS&lt;/a&gt; for easy backups and revision&lt;/li&gt;
  &lt;li&gt;not to care about servers and hosting&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So here‚Äôs what I‚Äôm using:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.github.com/articles/markdown-basics/&quot;&gt;Markdown&lt;/a&gt; to write posts&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; to generate static files with layout and content&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://divshot.io&quot;&gt;Divshot&lt;/a&gt; as a fast host and for an effortless deploy flow.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since I feel a bit ashamed of the old blog content, old posts won‚Äôt be converted (but may be rewritten).&lt;/p&gt;

&lt;p&gt;We‚Äôll see how it goes. :)&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Jun 2015 23:30:00 +0200</pubDate>
      </item>
    
  </channel>
</rss>
